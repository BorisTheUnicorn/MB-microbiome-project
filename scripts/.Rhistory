struc_zero = TRUE,                    # Detect structural zeros [cite: 25]
neg_lb = TRUE,                        # Allow negative LFC CI [cite: 42]
alpha = 0.05,                         # Significance level [cite: 42]
n_cl = 2,                             # Number of cores
global = TRUE,                        # Perform global tests
pairwise = TRUE,                      # Perform pairwise comparisons for 'group'
dunnet = FALSE,                       # Not using Dunnett's style here
trend = FALSE,                        # Not applicable with factor time for trend testing
# iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), # ANCOMBC defaults
# em_control = list(tol = 1e-5, max_iter = 100),                    # ANCOMBC defaults
verbose = TRUE
)
saveRDS(ancom_model_susc, file = ancom_susc_long_results_file)
message("ANCOM-BC2 for susceptibility (longitudinal, direct call) run and saved.")
} else {
message("Skipping ANCOM-BC2 for Susceptibility: Not enough samples or groups in ps_susc.")
ancom_model_susc <- list(error = "Insufficient samples/groups in ps_susc for ANCOM-BC2.")
}
}
# Briefly check the structure or errors
if(!is.null(ancom_model_susc$error)){
print(ancom_model_susc$error)
} else if (!is.null(ancom_model_susc$res)){
message("Susceptibility model (direct call) results (head of res):")
print(head(ancom_model_susc$res))
}
# This chunk can take a significant amount of time to run.
ancom_resil_long_results_file <- file.path(results_dir_longitudinal, "ancom_resil_longitudinal_simple_direct.rds")
if (file.exists(ancom_resil_long_results_file) && FALSE) { # Set to TRUE to load if exists
message("Loading previously run ANCOM-BC2 resilience results (direct call)...")
ancom_model_resil <- readRDS(ancom_resil_long_results_file)
} else {
message("Running ANCOM-BC2 directly for Resilience (Persistent_carrier vs Clearance_carrier)...")
if(nsamples(ps_resil) > 0 && length(levels(sample_data(ps_resil)$carriage_group)) > 1){
set.seed(ancom_seed) # Ensure reproducibility
ancom_model_resil <- ANCOMBC::ancombc2(
data = ps_resil,
tax_level = tax_level_to_analyze,
fix_formula = formula_longitudinal_simple_fix,
rand_formula = rand_formula_longitudinal_simple,
p_adj_method = "holm",
pseudo_sens = TRUE,
prv_cut = prevalence_cutoff,
lib_cut = 1000,
s0_perc = 0.05,
group = "carriage_group",
struc_zero = TRUE,
neg_lb = TRUE,
alpha = 0.05,
n_cl = 2,
global = TRUE,
pairwise = TRUE,
dunnet = FALSE,
trend = FALSE,
verbose = TRUE
)
saveRDS(ancom_model_resil, file = ancom_resil_long_results_file)
message("ANCOM-BC2 for resilience (longitudinal, direct call) run and saved.")
} else {
message("Skipping ANCOM-BC2 for Resilience: Not enough samples or groups in ps_resil.")
ancom_model_resil <- list(error = "Insufficient samples/groups in ps_resil for ANCOM-BC2.")
}
}
# Briefly check the structure or errors
if(!is.null(ancom_model_resil$error)){
print(ancom_model_resil$error)
} else if (!is.null(ancom_model_resil$res)){
message("Resilience model (direct call) results (head of res):")
print(head(ancom_model_resil$res))
}
if (!is.null(ancom_model_susc$res)) {
message("--- Visualizing Susceptibility Model Results ---")
vis_susc_long <- plot_ancom_all_terms(
ancom_model = ancom_model_susc,
top_n = 15, # Show top 15 significant taxa per contrast
filter_sensitivity = TRUE,
title_prefix = "Susceptibility (Longitudinal)",
subtitle = ancom_model_susc$formula # Assuming formula is stored in the output
)
if (length(vis_susc_long$plots) > 0) {
for (contrast in names(vis_susc_long$plots)) {
# Focus on interaction terms involving carriage_group and time_factor
if (grepl("carriage_group", contrast) && grepl("time_factor", contrast)) {
message(paste("Plotting interaction contrast:", contrast))
print(vis_susc_long$plots[[contrast]])
if (nrow(vis_susc_long$sig_taxa[[contrast]]) > 0) {
print(DT::datatable(vis_susc_long$sig_taxa[[contrast]],
caption = paste("Significant Taxa:", contrast)))
}
} else if (grepl("carriage_group", contrast) && !grepl(":", contrast)) { # Main effect of carriage group
message(paste("Plotting main effect contrast:", contrast))
print(vis_susc_long$plots[[contrast]])
if (nrow(vis_susc_long$sig_taxa[[contrast]]) > 0) {
print(DT::datatable(vis_susc_long$sig_taxa[[contrast]],
caption = paste("Significant Taxa:", contrast)))
}
}
}
} else {
message("No plots generated for the susceptibility model.")
}
# Save the full visualization list object
saveRDS(vis_susc_long, file = file.path(results_dir_longitudinal, "vis_ancom_susc_longitudinal.rds"))
} else {
message("Susceptibility model (ancom_model_susc) does not contain results to visualize.")
}
if (!is.null(ancom_model_resil$res)) {
message("--- Visualizing Resilience Model Results ---")
vis_resil_long <- plot_ancom_all_terms(
ancom_model = ancom_model_resil,
top_n = 15,
filter_sensitivity = TRUE,
title_prefix = "Resilience (Longitudinal)",
subtitle = ancom_model_resil$formula # Assuming formula is stored
)
if (length(vis_resil_long$plots) > 0) {
for (contrast in names(vis_resil_long$plots)) {
if (grepl("carriage_group", contrast) && grepl("time_factor", contrast)) {
message(paste("Plotting interaction contrast:", contrast))
print(vis_resil_long$plots[[contrast]])
if (nrow(vis_resil_long$sig_taxa[[contrast]]) > 0) {
print(DT::datatable(vis_resil_long$sig_taxa[[contrast]],
caption = paste("Significant Taxa:", contrast)))
}
} else if (grepl("carriage_group", contrast) && !grepl(":", contrast)) { # Main effect of carriage group
message(paste("Plotting main effect contrast:", contrast))
print(vis_resil_long$plots[[contrast]])
if (nrow(vis_resil_long$sig_taxa[[contrast]]) > 0) {
print(DT::datatable(vis_resil_long$sig_taxa[[contrast]],
caption = paste("Significant Taxa:", contrast)))
}
}
}
} else {
message("No plots generated for the resilience model.")
}
# Save the full visualization list object
saveRDS(vis_resil_long, file = file.path(results_dir_longitudinal, "vis_ancom_resil_longitudinal.rds"))
} else {
message("Resilience model (ancom_model_resil) does not contain results to visualize.")
}
View(ancom_model_resil)
ancom_model_resil[["res"]][["q_carriage_groupClearance_carrier:time_factorT4"]]
# Fixed effect formula:
# - carriage_group * time_factor: Interaction to see if trajectory differs by group
# - batch: To control for batch effects
formula_longitudinal_simple_fix <- "carriage_group * time_factor + batch"
# Random effect formula:
# - (1 | pid): Random intercept for each participant
rand_formula_longitudinal_simple <- "(1 | pid)"
# ANCOM-BC2 parameters (can be adjusted later)
tax_level_to_analyze <- "Genus"
prevalence_cutoff <- 0.05 # Filter: Taxa must be present in at least 10% of samples [cite: 42]
ancom_seed <- 12345
# This chunk can take a significant amount of time to run.
ancom_susc_long_results_file <- file.path(results_dir_longitudinal, "ancom_susc_longitudinal_simple_direct.rds")
if (file.exists(ancom_susc_long_results_file) && FALSE) { # Set to TRUE to load if exists
message("Loading previously run ANCOM-BC2 susceptibility results (direct call)...")
ancom_model_susc <- readRDS(ancom_susc_long_results_file)
} else {
message("Running ANCOM-BC2 directly for Susceptibility (Non_carrier vs Acquisition_carrier)...")
# Ensure ps_susc has enough samples and groups after filtering
if(nsamples(ps_susc) > 0 && length(levels(sample_data(ps_susc)$carriage_group)) > 1){
set.seed(ancom_seed) # Make sure seed is set for reproducibility
ancom_model_susc <- ANCOMBC::ancombc2(
data = ps_susc,                       # Phyloseq object
# assay_name = "counts",              # Default for phyloseq, or specify if different
tax_level = tax_level_to_analyze,     # e.g., "Genus"
fix_formula = formula_longitudinal_simple_fix, # Your defined fixed effects
rand_formula = rand_formula_longitudinal_simple, # Your defined random effects
p_adj_method = "holm",                # [cite: 63]
pseudo_sens = TRUE,                   # [cite: 9]
prv_cut = prevalence_cutoff,          # Your defined prevalence cutoff
lib_cut = 1000,                       # [cite: 42]
s0_perc = 0.05,                       # Desired value (tutorial default) [cite: 42]
group = "carriage_group",             # Primary grouping variable for pairwise
struc_zero = TRUE,                    # Detect structural zeros [cite: 25]
neg_lb = TRUE,                        # Allow negative LFC CI [cite: 42]
alpha = 0.05,                         # Significance level [cite: 42]
n_cl = 2,                             # Number of cores
global = TRUE,                        # Perform global tests
pairwise = TRUE,                      # Perform pairwise comparisons for 'group'
dunnet = FALSE,                       # Not using Dunnett's style here
trend = FALSE,                        # Not applicable with factor time for trend testing
# iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), # ANCOMBC defaults
# em_control = list(tol = 1e-5, max_iter = 100),                    # ANCOMBC defaults
verbose = TRUE
)
saveRDS(ancom_model_susc, file = ancom_susc_long_results_file)
message("ANCOM-BC2 for susceptibility (longitudinal, direct call) run and saved.")
} else {
message("Skipping ANCOM-BC2 for Susceptibility: Not enough samples or groups in ps_susc.")
ancom_model_susc <- list(error = "Insufficient samples/groups in ps_susc for ANCOM-BC2.")
}
}
# Briefly check the structure or errors
if(!is.null(ancom_model_susc$error)){
print(ancom_model_susc$error)
} else if (!is.null(ancom_model_susc$res)){
message("Susceptibility model (direct call) results (head of res):")
print(head(ancom_model_susc$res))
}
# This chunk can take a significant amount of time to run.
ancom_resil_long_results_file <- file.path(results_dir_longitudinal, "ancom_resil_longitudinal_simple_direct.rds")
if (file.exists(ancom_resil_long_results_file) && FALSE) { # Set to TRUE to load if exists
message("Loading previously run ANCOM-BC2 resilience results (direct call)...")
ancom_model_resil <- readRDS(ancom_resil_long_results_file)
} else {
message("Running ANCOM-BC2 directly for Resilience (Persistent_carrier vs Clearance_carrier)...")
if(nsamples(ps_resil) > 0 && length(levels(sample_data(ps_resil)$carriage_group)) > 1){
set.seed(ancom_seed) # Ensure reproducibility
ancom_model_resil <- ANCOMBC::ancombc2(
data = ps_resil,
tax_level = tax_level_to_analyze,
fix_formula = formula_longitudinal_simple_fix,
rand_formula = rand_formula_longitudinal_simple,
p_adj_method = "holm",
pseudo_sens = TRUE,
prv_cut = prevalence_cutoff,
lib_cut = 1000,
s0_perc = 0.05,
group = "carriage_group",
struc_zero = TRUE,
neg_lb = TRUE,
alpha = 0.05,
n_cl = 2,
global = TRUE,
pairwise = TRUE,
dunnet = FALSE,
trend = FALSE,
verbose = TRUE
)
saveRDS(ancom_model_resil, file = ancom_resil_long_results_file)
message("ANCOM-BC2 for resilience (longitudinal, direct call) run and saved.")
} else {
message("Skipping ANCOM-BC2 for Resilience: Not enough samples or groups in ps_resil.")
ancom_model_resil <- list(error = "Insufficient samples/groups in ps_resil for ANCOM-BC2.")
}
}
# Briefly check the structure or errors
if(!is.null(ancom_model_resil$error)){
print(ancom_model_resil$error)
} else if (!is.null(ancom_model_resil$res)){
message("Resilience model (direct call) results (head of res):")
print(head(ancom_model_resil$res))
}
if (!is.null(ancom_model_susc$res)) {
message("--- Visualizing Susceptibility Model Results ---")
vis_susc_long <- plot_ancom_all_terms(
ancom_model = ancom_model_susc,
top_n = 15, # Show top 15 significant taxa per contrast
filter_sensitivity = TRUE,
title_prefix = "Susceptibility (Longitudinal)",
subtitle = ancom_model_susc$formula # Assuming formula is stored in the output
)
if (length(vis_susc_long$plots) > 0) {
for (contrast in names(vis_susc_long$plots)) {
# Focus on interaction terms involving carriage_group and time_factor
if (grepl("carriage_group", contrast) && grepl("time_factor", contrast)) {
message(paste("Plotting interaction contrast:", contrast))
print(vis_susc_long$plots[[contrast]])
if (nrow(vis_susc_long$sig_taxa[[contrast]]) > 0) {
print(DT::datatable(vis_susc_long$sig_taxa[[contrast]],
caption = paste("Significant Taxa:", contrast)))
}
} else if (grepl("carriage_group", contrast) && !grepl(":", contrast)) { # Main effect of carriage group
message(paste("Plotting main effect contrast:", contrast))
print(vis_susc_long$plots[[contrast]])
if (nrow(vis_susc_long$sig_taxa[[contrast]]) > 0) {
print(DT::datatable(vis_susc_long$sig_taxa[[contrast]],
caption = paste("Significant Taxa:", contrast)))
}
}
}
} else {
message("No plots generated for the susceptibility model.")
}
# Save the full visualization list object
saveRDS(vis_susc_long, file = file.path(results_dir_longitudinal, "vis_ancom_susc_longitudinal.rds"))
} else {
message("Susceptibility model (ancom_model_susc) does not contain results to visualize.")
}
if (!is.null(ancom_model_resil$res)) {
message("--- Visualizing Resilience Model Results ---")
vis_resil_long <- plot_ancom_all_terms(
ancom_model = ancom_model_resil,
top_n = 15,
filter_sensitivity = TRUE,
title_prefix = "Resilience (Longitudinal)",
subtitle = ancom_model_resil$formula # Assuming formula is stored
)
if (length(vis_resil_long$plots) > 0) {
for (contrast in names(vis_resil_long$plots)) {
if (grepl("carriage_group", contrast) && grepl("time_factor", contrast)) {
message(paste("Plotting interaction contrast:", contrast))
print(vis_resil_long$plots[[contrast]])
if (nrow(vis_resil_long$sig_taxa[[contrast]]) > 0) {
print(DT::datatable(vis_resil_long$sig_taxa[[contrast]],
caption = paste("Significant Taxa:", contrast)))
}
} else if (grepl("carriage_group", contrast) && !grepl(":", contrast)) { # Main effect of carriage group
message(paste("Plotting main effect contrast:", contrast))
print(vis_resil_long$plots[[contrast]])
if (nrow(vis_resil_long$sig_taxa[[contrast]]) > 0) {
print(DT::datatable(vis_resil_long$sig_taxa[[contrast]],
caption = paste("Significant Taxa:", contrast)))
}
}
}
} else {
message("No plots generated for the resilience model.")
}
# Save the full visualization list object
saveRDS(vis_resil_long, file = file.path(results_dir_longitudinal, "vis_ancom_resil_longitudinal.rds"))
} else {
message("Resilience model (ancom_model_resil) does not contain results to visualize.")
}
# Fixed effect formula:
# - carriage_group * time_factor: Interaction to see if trajectory differs by group
# - batch: To control for batch effects
formula_longitudinal_simple_fix <- "carriage_group * time_factor + batch + cohort + selfsmoking + boardingschool + AB_month"
# Random effect formula:
# - (1 | pid): Random intercept for each participant
rand_formula_longitudinal_simple <- "(1 | pid)"
# ANCOM-BC2 parameters (can be adjusted later)
tax_level_to_analyze <- "Genus"
prevalence_cutoff <- 0.05 # Filter: Taxa must be present in at least 10% of samples [cite: 42]
ancom_seed <- 12345
# This chunk can take a significant amount of time to run.
ancom_susc_long_results_file <- file.path(results_dir_longitudinal, "ancom_susc_longitudinal_simple_direct.rds")
if (file.exists(ancom_susc_long_results_file) && FALSE) { # Set to TRUE to load if exists
message("Loading previously run ANCOM-BC2 susceptibility results (direct call)...")
ancom_model_susc <- readRDS(ancom_susc_long_results_file)
} else {
message("Running ANCOM-BC2 directly for Susceptibility (Non_carrier vs Acquisition_carrier)...")
# Ensure ps_susc has enough samples and groups after filtering
if(nsamples(ps_susc) > 0 && length(levels(sample_data(ps_susc)$carriage_group)) > 1){
set.seed(ancom_seed) # Make sure seed is set for reproducibility
ancom_model_susc <- ANCOMBC::ancombc2(
data = ps_susc,                       # Phyloseq object
# assay_name = "counts",              # Default for phyloseq, or specify if different
tax_level = tax_level_to_analyze,     # e.g., "Genus"
fix_formula = formula_longitudinal_simple_fix, # Your defined fixed effects
rand_formula = rand_formula_longitudinal_simple, # Your defined random effects
p_adj_method = "holm",                # [cite: 63]
pseudo_sens = TRUE,                   # [cite: 9]
prv_cut = prevalence_cutoff,          # Your defined prevalence cutoff
lib_cut = 1000,                       # [cite: 42]
s0_perc = 0.05,                       # Desired value (tutorial default) [cite: 42]
group = "carriage_group",             # Primary grouping variable for pairwise
struc_zero = TRUE,                    # Detect structural zeros [cite: 25]
neg_lb = TRUE,                        # Allow negative LFC CI [cite: 42]
alpha = 0.05,                         # Significance level [cite: 42]
n_cl = 2,                             # Number of cores
global = TRUE,                        # Perform global tests
pairwise = TRUE,                      # Perform pairwise comparisons for 'group'
dunnet = FALSE,                       # Not using Dunnett's style here
trend = FALSE,                        # Not applicable with factor time for trend testing
# iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), # ANCOMBC defaults
# em_control = list(tol = 1e-5, max_iter = 100),                    # ANCOMBC defaults
verbose = TRUE
)
saveRDS(ancom_model_susc, file = ancom_susc_long_results_file)
message("ANCOM-BC2 for susceptibility (longitudinal, direct call) run and saved.")
} else {
message("Skipping ANCOM-BC2 for Susceptibility: Not enough samples or groups in ps_susc.")
ancom_model_susc <- list(error = "Insufficient samples/groups in ps_susc for ANCOM-BC2.")
}
}
# Fixed effect formula:
# - carriage_group * time_factor: Interaction to see if trajectory differs by group
# - batch: To control for batch effects
formula_longitudinal_simple_fix <- "carriage_group * time_factor + batch + cohort + selfsmoking + boardingschool + AB_month"
# Random effect formula:
# - (1 | pid): Random intercept for each participant
rand_formula_longitudinal_simple <- "(1 | pid)"
# ANCOM-BC2 parameters (can be adjusted later)
tax_level_to_analyze <- "Genus"
prevalence_cutoff <- 0.05 # Filter: Taxa must be present in at least 10% of samples [cite: 42]
ancom_seed <- 12345
# This chunk can take a significant amount of time to run.
ancom_susc_long_results_file <- file.path(results_dir_longitudinal, "ancom_susc_longitudinal_simple_direct.rds")
if (file.exists(ancom_susc_long_results_file) && FALSE) { # Set to TRUE to load if exists
message("Loading previously run ANCOM-BC2 susceptibility results (direct call)...")
ancom_model_susc <- readRDS(ancom_susc_long_results_file)
} else {
message("Running ANCOM-BC2 directly for Susceptibility (Non_carrier vs Acquisition_carrier)...")
# Ensure ps_susc has enough samples and groups after filtering
if(nsamples(ps_susc) > 0 && length(levels(sample_data(ps_susc)$carriage_group)) > 1){
set.seed(ancom_seed) # Make sure seed is set for reproducibility
ancom_model_susc <- ANCOMBC::ancombc2(
data = ps_susc,                       # Phyloseq object
# assay_name = "counts",              # Default for phyloseq, or specify if different
tax_level = tax_level_to_analyze,     # e.g., "Genus"
fix_formula = formula_longitudinal_simple_fix, # Your defined fixed effects
rand_formula = rand_formula_longitudinal_simple, # Your defined random effects
p_adj_method = "holm",                # [cite: 63]
pseudo_sens = TRUE,                   # [cite: 9]
prv_cut = prevalence_cutoff,          # Your defined prevalence cutoff
lib_cut = 1000,                       # [cite: 42]
s0_perc = 0.05,                       # Desired value (tutorial default) [cite: 42]
group = "carriage_group",             # Primary grouping variable for pairwise
struc_zero = TRUE,                    # Detect structural zeros [cite: 25]
neg_lb = TRUE,                        # Allow negative LFC CI [cite: 42]
alpha = 0.05,                         # Significance level [cite: 42]
n_cl = 2,                             # Number of cores
global = TRUE,                        # Perform global tests
pairwise = TRUE,                      # Perform pairwise comparisons for 'group'
dunnet = FALSE,                       # Not using Dunnett's style here
trend = FALSE,                        # Not applicable with factor time for trend testing
# iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), # ANCOMBC defaults
# em_control = list(tol = 1e-5, max_iter = 100),                    # ANCOMBC defaults
verbose = TRUE
)
saveRDS(ancom_model_susc, file = ancom_susc_long_results_file)
message("ANCOM-BC2 for susceptibility (longitudinal, direct call) run and saved.")
} else {
message("Skipping ANCOM-BC2 for Susceptibility: Not enough samples or groups in ps_susc.")
ancom_model_susc <- list(error = "Insufficient samples/groups in ps_susc for ANCOM-BC2.")
}
}
# Core packages
library(phyloseq)
library(ANCOMBC)
library(dplyr)
library(ggplot2)
library(DT)        # For interactive tables
library(patchwork)   # For combining plots
library(kableExtra)  # For nicer tables in Rmd
# Source custom functions
# Ensure these paths are correct relative to your Rmd file location
source("../R/preprocessing_functions.R")
source("../R/differential_abundance.R")
source("../R/visualization_functions.R")
# Define paths
processed_data_dir <- "../data/processed_to_ANCOM/"
results_dir_longitudinal <- "../results/longitudinal_analysis/"
# Create results directory if it doesn't exist
if(!dir.exists(results_dir_longitudinal)) {
dir.create(results_dir_longitudinal, recursive = TRUE)
}
ps_full <- readRDS(file.path(processed_data_dir, "nm_phyloseq_classified_full.rds"))
# Basic check of the loaded data
print(ps_full)
message("Initial sample counts by carriage group and time:")
print(table(sample_data(ps_full)$carriage_group, sample_data(ps_full)$time, dnn=c("Carriage Group", "Time Point")))
message("Initial sample counts by batch:")
print(table(sample_data(ps_full)$batch, dnn="Batch"))
# Filter out batch "4" as it's problematic and has very few samples
ps_analysis_base <- subset_samples(ps_full, batch != "4")
# Prune taxa that may now have zero sums after sample subsetting
ps_analysis_base <- prune_taxa(taxa_sums(ps_analysis_base) > 0, ps_analysis_base)
# Ensure 'pid' (participant ID) is a factor for random effects
sample_data(ps_analysis_base)$pid <- factor(sample_data(ps_analysis_base)$pid)
# Create 'time_factor' from the 'time' variable (0, 2, 4 months)
sample_data(ps_analysis_base)$time_factor <- factor(
sample_data(ps_analysis_base)$time,
levels = c("0", "2", "4"),
labels = c("T0", "T2", "T4")
)
sample_data(ps_analysis_base)$time_factor <- relevel(sample_data(ps_analysis_base)$time_factor, ref = "T0")
# Ensure 'batch' is a factor
sample_data(ps_analysis_base)$batch <- factor(sample_data(ps_analysis_base)$batch)
# Ensure 'cohort' is a factor (already present from initial import)
sample_data(ps_analysis_base)$cohort <- factor(sample_data(ps_analysis_base)$cohort)
# --- MERGE ADDITIONAL DEMOGRAPHIC DATA ---
# Load demographic data
# Ensure the path to your demographic data Excel file is correct
demographic_data_path <- "../data/raw/demographic data _Jan2022_final.YM.20241230.xlsx"
if(file.exists(demographic_data_path)){
demographic_data <- readxl::read_excel(demographic_data_path) %>%
mutate(
pid = as.character(pid), # Ensure pid is character for joining
boardingschool = factor(boardingschool),
selfsmoking = factor(selfsmoking),
AB_month = factor(AB_month)
# Add any other demographic variables you might need here and ensure they are factors
) %>%
select(pid, boardingschool, selfsmoking, AB_month) # Select only the columns needed for the formula
# Get current sample data from ps_analysis_base
current_sample_data <- as.data.frame(sample_data(ps_analysis_base))
# Preserve original rownames (SampleIDs) if they are meaningful
original_rownames <- rownames(current_sample_data)
# Merge
# Ensure 'pid' in current_sample_data is also character if it's not already
current_sample_data$pid <- as.character(current_sample_data$pid)
# Perform the left join
# Keep all rows from current_sample_data and add matching demographic data
# Remove existing columns from current_sample_data if they have the same name as in demographic_data to avoid suffix issues, except for 'pid'
cols_in_demographic_to_remove_from_current <- names(demographic_data)[names(demographic_data) != "pid"]
current_sample_data_slim <- current_sample_data[, !names(current_sample_data) %in% cols_in_demographic_to_remove_from_current]
merged_sample_data <- current_sample_data_slim %>%
left_join(demographic_data, by = "pid")
# Restore original rownames
if(nrow(merged_sample_data) == length(original_rownames)){
rownames(merged_sample_data) <- original_rownames
} else {
warning("Row numbers changed during merge, check 'pid' matching. Rownames might not be correctly restored.")
# Fallback to SampleID if it exists and is unique
if("SampleID" %in% names(merged_sample_data) && length(unique(merged_sample_data$SampleID)) == nrow(merged_sample_data)){
rownames(merged_sample_data) <- merged_sample_data$SampleID
}
}
# Update sample_data in the phyloseq object
sample_data(ps_analysis_base) <- sample_data(merged_sample_data)
message("Additional demographic data merged into ps_analysis_base.")
# Verify the new columns are present
# print(head(sample_data(ps_analysis_base)))
# print(colnames(sample_data(ps_analysis_base)))
} else {
warning(paste("Demographic data file not found at:", demographic_data_path, "- variables like selfsmoking, boardingschool, AB_month will be missing."))
}
